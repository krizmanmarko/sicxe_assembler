parser grammar PrevParser;

@header {
	package prev23.phase.synan;
	import prev23.data.ast.tree.*;

	import java.util.*;

	import prev23.common.report.*;
	import prev23.phase.lexan.*;
}

options{
    tokenVocab=PrevLexer;
}


source
  : lines EOF
;

lines
  : (line EOL)*
;

line
  : directive
  | instruction
  |
;

instruction
  : possible_label f1
  | possible_label f2
  | possible_label f3
  | possible_label f4
;

possible_label
  : ID
  |
;

f1
  : FIX
  | FLOAT
  | HIO
  | NORM
  | SIO
  | TIO
;

f2
  : ADDR reg COMMA reg
  | CLEAR reg
  | COMPR reg COMMA reg
  | DIVR reg COMMA reg
  | MULR reg COMMA reg
  | RMO reg COMMA reg
  | SHIFTL reg COMMA number
  | SHIFTR reg COMMA number
  | SUBR reg COMMA reg
  | SVC number
  | TIXR reg
;

f3
  : ADD address (COMMA X)?
  | ADDF address (COMMA X)?
  | AND address (COMMA X)?
  | COMP address (COMMA X)?
  | COMPF address (COMMA X)?
  | DIV address (COMMA X)?
  | DIVF address (COMMA X)?
  | J address (COMMA X)?
  | JEQ address (COMMA X)?
  | JGT address (COMMA X)?
  | JLT address (COMMA X)?
  | JSUB address (COMMA X)?
  | LDA address (COMMA X)?
  | LDB address (COMMA X)?
  | LDCH address (COMMA X)?
  | LDF address (COMMA X)?
  | LDL address (COMMA X)?
  | LDS address (COMMA X)?
  | LDT address (COMMA X)?
  | LDX address (COMMA X)?
  | LPS address (COMMA X)?
  | MUL address (COMMA X)?
  | MULF address (COMMA X)?
  | OR address (COMMA X)?
  | RD address (COMMA X)?
  | RSUB
  | SSK address (COMMA X)?
  | STA address (COMMA X)?
  | STB address (COMMA X)?
  | STCH address (COMMA X)?
  | STF address (COMMA X)?
  | STI address (COMMA X)?
  | STL address (COMMA X)?
  | STS address (COMMA X)?
  | STSW address (COMMA X)?
  | STT address (COMMA X)?
  | STX address (COMMA X)?
  | SUB address (COMMA X)?
  | SUBF address (COMMA X)?
  | TD address (COMMA X)?
  | TIX address (COMMA X)?
  | WD address (COMMA X)?
;

f4
  : PLUS f3
;

directive
  : ID START address
  | END address
  | ORG address
  | BASE address
  | NOBASE
  | name EQU expression
  | EXTDEF symbol (COMMA symbol)*
  | EXTREF symbol (COMMA symbol)*
  | LTORG
  | name CSECT
  | USE (name)?
  | possible_label RESB number
  | possible_label RESW number
  | possible_label RESF number
  | possible_label BYTE data
  | possible_label WORD data
  | possible_label FLOT data
;

address
  : addressing_mode number
  | addressing_mode ID
;

addressing_mode
  : HASH
  |
  | AT
  | EQUAL
;

// for now any calculations are omitted
expression
  : number
;

symbol
  : ID
;

name
  : ID
;

number
  : INT_CONST
  | PLUS INT_CONST
  | MINUS INT_CONST
;

// memory reservations
data
  : INT_CONST
  | STRING_CONST
  | HEX_CONST
;

reg : A | X | L | B | S | T | F | PC | SW ;
